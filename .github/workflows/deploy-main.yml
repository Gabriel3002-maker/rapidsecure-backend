name: Java CI/CD with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
           mvn clean install
           mkdir artifacts && cp target/*.jar artifacts
           cd artifacts && ls
    - name: Save artifact
      uses: actions/upload-artifact@v2
      with:
        name: github-action-artifact
        path: artifacts
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/spring-boot-github-action-demo:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        env:
          VPS_USER: root
          VPS_HOST: 77.237.234.122
        run: |
          # Verificar conexi√≥n SSH
          ssh -o ConnectTimeout=10 $VPS_USER@$VPS_HOST 'echo "SSH connection successful"'

          # Pull the Docker image from Docker Hub and deploy it
          echo "Pulling Docker image from Docker Hub..."
          ssh $VPS_USER@$VPS_HOST << EOF
            # Eliminar contenedor antiguo si existe
            sudo docker rm -f spring-boot-app-container || true
            # Eliminar imagen antigua si existe
            sudo docker rmi -f ${{ secrets.DOCKER_USERNAME }}/spring-boot-github-action-demo:latest || true
            # Descargar nueva imagen Docker
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-github-action-demo:latest
            # Ejecutar nueva imagen Docker
            sudo docker run -d -p 8080:8080 --name spring-boot-app-container ${{ secrets.DOCKER_USERNAME }}/spring-boot-github-action-demo:latest
          EOF
